/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace AbstractInvoice {
  export type InvoiceDataStruct = {
    payee: string;
    payer: string;
    amount: BigNumberish;
    currency: string;
    frequency: BigNumberish;
    startingTime: BigNumberish;
    durationForRetiresBeforeFailure: BigNumberish;
    expiry: BigNumberish;
    paymentNonce: BigNumberish;
    paymentParameter: BytesLike;
  };

  export type InvoiceDataStructOutput = [
    string,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    payee: string;
    payer: string;
    amount: BigNumber;
    currency: string;
    frequency: number;
    startingTime: BigNumber;
    durationForRetiresBeforeFailure: BigNumber;
    expiry: BigNumber;
    paymentNonce: BigNumber;
    paymentParameter: string;
  };
}

export interface InvoiceInterface extends utils.Interface {
  functions: {
    "EXECUTOR_CONTRACT()": FunctionFragment;
    "UNIQUE_INDENTIFIER()": FunctionFragment;
    "cancelledInvoices(uint256)": FunctionFragment;
    "createInvoice((address,address,uint256,address,uint8,uint256,uint256,uint256,uint256,bytes32))": FunctionFragment;
    "currencies(address)": FunctionFragment;
    "execute((address,address,uint256,address,uint8,uint256,uint256,uint256,uint256,bytes32),bytes)": FunctionFragment;
    "feePercent()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "payees(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurrency(address[],bool)": FunctionFragment;
    "setExecutorContract(address)": FunctionFragment;
    "setFeePercent(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifySignature((address,address,uint256,address,uint8,uint256,uint256,uint256,uint256,bytes32),bytes)": FunctionFragment;
    "whitelistPayee(address[],bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXECUTOR_CONTRACT"
      | "UNIQUE_INDENTIFIER"
      | "cancelledInvoices"
      | "createInvoice"
      | "currencies"
      | "execute"
      | "feePercent"
      | "initialize"
      | "isAdmin"
      | "nonce"
      | "owner"
      | "payees"
      | "renounceOwnership"
      | "setCurrency"
      | "setExecutorContract"
      | "setFeePercent"
      | "transferOwnership"
      | "verifySignature"
      | "whitelistPayee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXECUTOR_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNIQUE_INDENTIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledInvoices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createInvoice",
    values: [AbstractInvoice.InvoiceDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "currencies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AbstractInvoice.InvoiceDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payees", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrency",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutorContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [AbstractInvoice.InvoiceDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistPayee",
    values: [string[], boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTOR_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNIQUE_INDENTIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledInvoices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currencies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistPayee",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteInvoice(tuple,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InvoiceCreated(tuple,bytes32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetCurrency(address,bool)": EventFragment;
    "SetExecutorContract(address)": EventFragment;
    "SetFeePercent(uint256)": EventFragment;
    "SetPayee(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteInvoice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvoiceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCurrency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExecutorContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPayee"): EventFragment;
}

export interface ExecuteInvoiceEventObject {
  invoiceData: AbstractInvoice.InvoiceDataStructOutput;
  start: BigNumber;
}
export type ExecuteInvoiceEvent = TypedEvent<
  [AbstractInvoice.InvoiceDataStructOutput, BigNumber],
  ExecuteInvoiceEventObject
>;

export type ExecuteInvoiceEventFilter = TypedEventFilter<ExecuteInvoiceEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InvoiceCreatedEventObject {
  invoiceData: AbstractInvoice.InvoiceDataStructOutput;
  _hash: string;
  _nonce: BigNumber;
}
export type InvoiceCreatedEvent = TypedEvent<
  [AbstractInvoice.InvoiceDataStructOutput, string, BigNumber],
  InvoiceCreatedEventObject
>;

export type InvoiceCreatedEventFilter = TypedEventFilter<InvoiceCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetCurrencyEventObject {
  payee: string;
  enabled: boolean;
}
export type SetCurrencyEvent = TypedEvent<
  [string, boolean],
  SetCurrencyEventObject
>;

export type SetCurrencyEventFilter = TypedEventFilter<SetCurrencyEvent>;

export interface SetExecutorContractEventObject {
  EXECUTOR_CONTRACT: string;
}
export type SetExecutorContractEvent = TypedEvent<
  [string],
  SetExecutorContractEventObject
>;

export type SetExecutorContractEventFilter =
  TypedEventFilter<SetExecutorContractEvent>;

export interface SetFeePercentEventObject {
  _feePercent: BigNumber;
}
export type SetFeePercentEvent = TypedEvent<
  [BigNumber],
  SetFeePercentEventObject
>;

export type SetFeePercentEventFilter = TypedEventFilter<SetFeePercentEvent>;

export interface SetPayeeEventObject {
  payee: string;
  enabled: boolean;
}
export type SetPayeeEvent = TypedEvent<[string, boolean], SetPayeeEventObject>;

export type SetPayeeEventFilter = TypedEventFilter<SetPayeeEvent>;

export interface Invoice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InvoiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXECUTOR_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    UNIQUE_INDENTIFIER(overrides?: CallOverrides): Promise<[string]>;

    cancelledInvoices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createInvoice(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currencies(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    execute(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _EXECUTOR_CONTRACT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdmin(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payees(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrency(
      _currencies: string[],
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutorContract(
      _EXECUTOR_CONTRACT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifySignature(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistPayee(
      _payees: string[],
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EXECUTOR_CONTRACT(overrides?: CallOverrides): Promise<string>;

  UNIQUE_INDENTIFIER(overrides?: CallOverrides): Promise<string>;

  cancelledInvoices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createInvoice(
    invoiceData: AbstractInvoice.InvoiceDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currencies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  execute(
    invoiceData: AbstractInvoice.InvoiceDataStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _EXECUTOR_CONTRACT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdmin(user: string, overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrency(
    _currencies: string[],
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutorContract(
    _EXECUTOR_CONTRACT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifySignature(
    invoiceData: AbstractInvoice.InvoiceDataStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistPayee(
    _payees: string[],
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXECUTOR_CONTRACT(overrides?: CallOverrides): Promise<string>;

    UNIQUE_INDENTIFIER(overrides?: CallOverrides): Promise<string>;

    cancelledInvoices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createInvoice(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      overrides?: CallOverrides
    ): Promise<
      [AbstractInvoice.InvoiceDataStructOutput, string, BigNumber] & {
        returnedInvoice: AbstractInvoice.InvoiceDataStructOutput;
        _hash: string;
        _nonce: BigNumber;
      }
    >;

    currencies(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    execute(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _EXECUTOR_CONTRACT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAdmin(user: string, overrides?: CallOverrides): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCurrency(
      _currencies: string[],
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutorContract(
      _EXECUTOR_CONTRACT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySignature(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistPayee(
      _payees: string[],
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExecuteInvoice(tuple,uint256)"(
      invoiceData?: null,
      start?: null
    ): ExecuteInvoiceEventFilter;
    ExecuteInvoice(invoiceData?: null, start?: null): ExecuteInvoiceEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InvoiceCreated(tuple,bytes32,uint256)"(
      invoiceData?: null,
      _hash?: null,
      _nonce?: null
    ): InvoiceCreatedEventFilter;
    InvoiceCreated(
      invoiceData?: null,
      _hash?: null,
      _nonce?: null
    ): InvoiceCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetCurrency(address,bool)"(
      payee?: null,
      enabled?: null
    ): SetCurrencyEventFilter;
    SetCurrency(payee?: null, enabled?: null): SetCurrencyEventFilter;

    "SetExecutorContract(address)"(
      EXECUTOR_CONTRACT?: null
    ): SetExecutorContractEventFilter;
    SetExecutorContract(
      EXECUTOR_CONTRACT?: null
    ): SetExecutorContractEventFilter;

    "SetFeePercent(uint256)"(_feePercent?: null): SetFeePercentEventFilter;
    SetFeePercent(_feePercent?: null): SetFeePercentEventFilter;

    "SetPayee(address,bool)"(payee?: null, enabled?: null): SetPayeeEventFilter;
    SetPayee(payee?: null, enabled?: null): SetPayeeEventFilter;
  };

  estimateGas: {
    EXECUTOR_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIQUE_INDENTIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    cancelledInvoices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createInvoice(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currencies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _EXECUTOR_CONTRACT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdmin(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrency(
      _currencies: string[],
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutorContract(
      _EXECUTOR_CONTRACT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifySignature(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistPayee(
      _payees: string[],
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXECUTOR_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIQUE_INDENTIFIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelledInvoices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createInvoice(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _EXECUTOR_CONTRACT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrency(
      _currencies: string[],
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutorContract(
      _EXECUTOR_CONTRACT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifySignature(
      invoiceData: AbstractInvoice.InvoiceDataStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistPayee(
      _payees: string[],
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
